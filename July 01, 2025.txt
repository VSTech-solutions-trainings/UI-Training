July 01, 2025

Whenever we have a concat between a string and any datatype always strings win
	eg: 60 + '30' - // 6030
	
	+  2 ways 1) adding numbers or string concat
	
	Number('30') - 30
	
	60 + Number('30') - 60 + 30 - 90
	
	60 + parseInt('30') - 90 
			
			
Javascript have two types of coercion and conversion

			1) Implicit coercion - Javascript handles in the behind
				60 + '30' - '60' + '30' - 6030
				
				
			2) Explicit conversion 
				60 + Number('30') - which developers converts any data type to other data type 
			
----

naming conventions in Javascript(React/angular)
	- camelCase - fullname - fullName (variables and functions)
	- pascalCase - fullname - FullName (React/angular - Classes, constructors)
	- kebabCase - fullname - full-name ( file names, css classes, id, selectors)
	
Operators - + * / %  

== , ===

== --> checks only the value
=== --> it checks both the value and the data type

-----

Scoping (visibilty of a variables)
	Three types of scopes in javascript
		1) Global - when we define a variable outside of a function then it will a global or window scope
		2) Function - var, let and const which are defined inside a function are always function scoped.
		3) Block - let const - {} - this will be accessible only inside {...}. if a variable is declared with var inside a block scope	
					we can use it outside of it
		
ES6 let const 

we cannot redefine the same variables using let
we cannot re-assign the values using const

Next class -- 

Strings, Arrays, Objects Functions

ES6 