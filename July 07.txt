July 07, 2025

//when to use let and const ?
//use const whenever there is no change in the value
// let age = 1
// const arr = [1,2,3]
// arr.forEach(function(ele) {
//     if(ele === 2) {
//         age = age + 2
//     }
// })
// console.log(age)

//array changes using reference

// let arr = [1,2,3] // address 01010101


// arr[2] = 9

// console.log('arr', arr) // [1,2,9]
// console.log('newArr', newArr) // [9,2,9]

//How many ways create an object ?

//spread operators - this will create a new array(technically objects)

// let arr = [1,2,3]
// let newArr = [...arr] 
// newArr[0] = 9

// console.log('arr', arr)
// console.log('newarr', newArr)

//shallow copy - nested objects are still passed as a reference.

let arr = [1,2, [3,4,5]]
let newArr = [...arr] //[1,2, [11,4,5]]

newArr[2][0] = 11

console.log('new',newArr) // [1,2, [11,4,5]]
console.log('arr', arr) //  [1,2, [11,4,5]]

//deep copy - structuredClone

let someArr = [3,4, [9,10]]
let newSomeArr = structuredClone(someArr)

newSomeArr[2][0] = 9999

console.log('someArr',someArr) // [1,2, [11,4,5]]
console.log('newSomeArr', newSomeArr) //  [1,2, [11,4,5]]

//Array destructuring

const arrExample = ['a', 'b', 2]

// const zeroIndexValue = arrExample[0]
// const firstIndexValue = arrExample[1]
// const secondIndexValue = arrExample[2]

const [zeroIndexValue, firstIndexValue, secondIndexValue, forutj] = arrExample

console.log('zero',forutj) //undefined




